<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日总结</title>
      <link href="/posts/a91e371b.html"/>
      <url>/posts/a91e371b.html</url>
      
        <content type="html"><![CDATA[<ol><li>学习了拷贝函数的基本构造语法：<br><code>Person(const Person &amp;p)&#123;&#125;</code></li><li>学习了拷贝函数的调用方法，调用时机:</li></ol><ul><li>使用一个创建完毕的对象来调用拷贝一个新的对象，默认属性全部复制:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1(10) ;</span><br><span class="line">Person p2(p1) ;</span><br></pre></td></tr></table></figure></li><li>通过值传递给参数赋值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void doWork(Person p)&#123;&#125;</span><br><span class="line">void test01&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    doWork(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过调用函数，利用值的方式返回局部对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person doWork()&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    return p1;</span><br><span class="line">&#125;</span><br><span class="line">void test02()&#123;</span><br><span class="line">    Person p = doWork();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>学习了调用规则：</li></ol><ul><li>如果类中没有写任何对象初始化和清理的函数，那么编译器会默认调用默认构造函数（无参，函数体为空），默认析构函数（无参，函数体为空），默认拷贝构造函数（对属性值进行拷贝）；</li><li>如果类中定义了含参数的构造函数，编译器会提供默认拷贝函数和析构函数，不会再提供没有参数的构造函数；</li><li>如果类中定义了拷贝构造函数，那么编译器不会再提供其他构造函数。</li></ul><ol start="4"><li>学会了深拷贝和浅拷贝的概念<br>一般编译器会默认拷贝构造函数为浅拷贝，即复制所有的属性，这样的情况下如果传入的是一个指针，那么拷贝出来的属性就会指向同一个地址，如果删除了前一个指针指向的堆空间，那么拷贝出来的指针就会指向空，引起出错，这就是典型的堆区重复使用</li></ol><ul><li>浅拷贝：简单的赋值拷贝</li><li>深拷贝：申请堆空间进行拷贝</li><li>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person&#123;</span><br><span class="line">public:</span><br><span class="line">    Person(int age,int height)&#123;</span><br><span class="line">        m_age = age;</span><br><span class="line">        m_height = new int(height);</span><br><span class="line">        cout&lt;&lt;&quot;Person 含参数构造成功！&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    Person(const Person &amp;p)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;拷贝函数!&quot;&lt;&lt;endl;</span><br><span class="line">        m_age = p.m_age;</span><br><span class="line">       // m_height = p.m_height; </span><br><span class="line">    /*编译器提供这两行代码，但是在析构函数中，会先删除p的m_height指向的空间，而 p1的m_height</span><br><span class="line">    也指向这个空间，导致非法操作,因此需要在拷贝函数中添加一些操作防止指向同一个空间</span><br><span class="line">    */</span><br><span class="line">        m_height = new int(*p.m_height);  //不要忘记解引用哦~</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ~Person()&#123;</span><br><span class="line">        cout&lt;&lt;&quot;Person 析构函数&quot;&lt;&lt;endl;</span><br><span class="line">        if(m_height != NULL)&#123;</span><br><span class="line">            delete m_height;</span><br><span class="line">            m_height = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">public:</span><br><span class="line">    int m_age;</span><br><span class="line">    int *m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test()&#123;</span><br><span class="line">    Person p(21,173);</span><br><span class="line">    cout&lt;&lt;&quot;p年龄：&quot;&lt;&lt;p.m_age&lt;&lt;&quot; 身高：&quot;&lt;&lt;*p.m_height&lt;&lt;endl;</span><br><span class="line">    Person p1 = p;</span><br><span class="line">    cout&lt;&lt;&quot;p1年龄：&quot;&lt;&lt;p1.m_age&lt;&lt;&quot; 身高：&quot;&lt;&lt;*p1.m_height&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    test();</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++语法知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拷贝构造函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣</title>
      <link href="/posts/6ead9846.html"/>
      <url>/posts/6ead9846.html</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h2><p>一般用于解决n个<strong>有序递增</strong>元素的数组，给定目标值，返回数组下标，同时还<strong>不能有重复元素</strong>，二分法的原理很简单，大致思路是先设置左右区间，然后用区间中心的元素值和 <code>target</code>进行比较，不断更改区间即可。</p><h2 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h2><p>二分查找一般分为：左闭右闭区间和左闭右开区间，容易混淆的是：</p><ul><li>边界条件，while循环里面到底是left&lt;right还是left &lt;&#x3D; right ?,更改区间的时候到底是改成middle 还是middle+(-) 1 ?</li><li>设置middle时出错，一般middle中间值的设定有<code>middle =left+(right-left) 和middle = (left+right) /2  </code>两种 ，第一种是最适合计算中间索引的方法，不会存在整数溢出的情况，反之第二种大多时候都适合，但是当两个边界相加可能超过整数类型的最大值是会造成数据溢出，从而计算出错.<strong>因此，更偏向于使用第一种，即 middle &#x3D; left+(right-left)&#x2F;2。</strong></li></ul><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><h3 id="第一种（左闭右闭）"><a href="#第一种（左闭右闭）" class="headerlink" title="第一种（左闭右闭）"></a>第一种（左闭右闭）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    //解法一：左闭右闭</span><br><span class="line">public:</span><br><span class="line">    int search(std::vector&lt;int&gt;&amp;nums,int target)&#123;</span><br><span class="line">        int left=0;</span><br><span class="line">        int right=nums.size()-1;</span><br><span class="line">        while(left&lt;=right)&#123;</span><br><span class="line">            //不用 (right + left) / 2 可能导致整数溢出</span><br><span class="line">            int middle=left+(right - left) / 2;</span><br><span class="line">            </span><br><span class="line">            if(nums[middle] &lt; target)&#123;</span><br><span class="line">                left=middle+1;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle-1;</span><br><span class="line">            &#125;</span><br><span class="line">            else return middle;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第二种（左闭右开）"><a href="#第二种（左闭右开）" class="headerlink" title="第二种（左闭右开）"></a>第二种（左闭右开）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">// 解法二 ： 左闭右开</span><br><span class="line">public:</span><br><span class="line">    int search(std::vector&lt;int&gt;&amp;nums,int target)&#123;</span><br><span class="line">        int left = 0 ,right = nums.size();</span><br><span class="line">        while(left &lt; right )&#123;</span><br><span class="line">            int middle = left + (right - left) / 2;</span><br><span class="line">            if(nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            else return middle;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>addressBook</title>
      <link href="/posts/6df24f7a.html"/>
      <url>/posts/6df24f7a.html</url>
      
        <content type="html"><![CDATA[<h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="1-系统需求"><a href="#1-系统需求" class="headerlink" title="1.系统需求"></a>1.系统需求</h2><ul><li>添加联系人</li><li>查找联系人</li><li>显示联系人</li><li>删除联系人</li><li>修改联系人</li><li>清空通讯录</li><li>推出通讯录</li></ul><h2 id="2-菜单功能"><a href="#2-菜单功能" class="headerlink" title="2.菜单功能"></a>2.菜单功能</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void ShowMenu()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;*********************&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****1.添加联系人****&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****2.显示联系人****&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****3.删除联系人****&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****4.查找联系人****&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****5.修改联系人****&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****6.清空联系人****&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;****0.退出通讯录****&quot;&lt;&lt;endl; </span><br><span class="line">    cout&lt;&lt;&quot;*********************&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-退出功能"><a href="#3-退出功能" class="headerlink" title="3.退出功能"></a>3.退出功能</h2><p>根据用户不同的选择，可以进行不同的功能，使用switch语句，当用户输入 0 时，可以实现退出通讯录的功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">while(true)&#123;</span><br><span class="line">        switch (select)&#123;</span><br><span class="line">            case 1: //添加联系人</span><br><span class="line">                break;</span><br><span class="line">            case 2: //显示联系人</span><br><span class="line">                break;</span><br><span class="line">            case 3: //删除联系人</span><br><span class="line">                break;</span><br><span class="line">            case 4: //查找联系人</span><br><span class="line">                break;</span><br><span class="line">            case 5: //修改联系人</span><br><span class="line">                break;</span><br><span class="line">            case 6://清空联系人</span><br><span class="line">                break;</span><br><span class="line">            case 0:</span><br><span class="line">                cout&lt;&lt;&quot;欢迎下次使用&quot;&lt;&lt;endl;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-功能实现"><a href="#4-功能实现" class="headerlink" title="4.功能实现"></a>4.功能实现</h2><h3 id="4-1添加联系人"><a href="#4-1添加联系人" class="headerlink" title="4.1添加联系人"></a>4.1添加联系人</h3><p> 封装addPerson函数</p><p>实现添加姓名，性别等属性时的操作基本一致，掌握其中一种便可以类推，关键是理解添加过程中的结构体指针使用过程，如 <code>abk-&gt;person_array[abk-&gt;size].p_name</code>还可以在每个添加的属性前面加一个while死循环判断，剔除非法值。注意注释的部分，能够更好的理解代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">void  add_Person(AddrBook *abk)&#123;</span><br><span class="line">    //判断是否超出容量</span><br><span class="line">    if(abk-&gt;size &gt; MaxSize)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;当前通讯录已满，无法继续操作&quot;&lt;&lt;endl;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //添加姓名</span><br><span class="line">    string name; //存储输入的姓名，下面添加别的项同此作用</span><br><span class="line">    cout&lt;&lt;&quot;请输入姓名: &quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;name;</span><br><span class="line">    abk-&gt;person_array[abk-&gt;size].p_name=name;</span><br><span class="line">  </span><br><span class="line">    //添加性别</span><br><span class="line">    int sex;</span><br><span class="line">    while(true)&#123;</span><br><span class="line">        //通过一个死循环，可以处理用户输入的非法数据，后面也可以进行类似操作使代码变得更加健壮</span><br><span class="line">        cout&lt;&lt;&quot;请输入性别: &quot;&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;&quot;1---男 2---女&quot;&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;sex;</span><br><span class="line">        if(sex == 1 || sex == 2)&#123;</span><br><span class="line">            abk-&gt;person_array[abk-&gt;size].p_sex=sex;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt;&quot;输入有误，请重新输入: &quot;&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    //添加年龄</span><br><span class="line">    int age;</span><br><span class="line">    cout&lt;&lt;&quot;请输入年龄: &quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;age;</span><br><span class="line">    abk-&gt;person_array[abk-&gt;size].p_age=age;</span><br><span class="line"></span><br><span class="line">    //添加电话</span><br><span class="line">    string phone;</span><br><span class="line">    cout&lt;&lt;&quot;请输入联系电话: &quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;phone;</span><br><span class="line">    abk-&gt;person_array[abk-&gt;size].p_phone=phone; </span><br><span class="line">  </span><br><span class="line">    //添加地址</span><br><span class="line">    string address;</span><br><span class="line">    cout&lt;&lt;&quot;请输入地址: &quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;address;</span><br><span class="line">    abk-&gt;person_array[abk-&gt;size].p_address=address;</span><br><span class="line"></span><br><span class="line">    //添加成功后的操作</span><br><span class="line">    cout&lt;&lt;&quot;添加成功&quot;&lt;&lt;endl;</span><br><span class="line">    abk-&gt;size++;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main函数中的操作为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    //在main目录创建一个结构体对象并初始化</span><br><span class="line">    AddrBook abk;</span><br><span class="line">    abk.size=0;</span><br><span class="line">    ...</span><br><span class="line">    case 1: //添加联系人</span><br><span class="line">        add_Person(&amp;abk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2显示联系人"><a href="#4-2显示联系人" class="headerlink" title="4.2显示联系人"></a>4.2显示联系人</h3><p>设计思路：先判断通讯录为空和通讯录非空的情况，分别进行处理，当通讯录非空时，设计一个循环，根据传入的通讯录结构体指针所指明的size大小来设定循环次数，并且每次输出全部信息，每条信息通过”\t”（制表符，八个空格）隔开，注意输出性别信息时可以用if-else语句或者三目运算符来处理，保证输出“男”或“女”，最后进行清屏操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void showPerson(AddrBook *abk)&#123;</span><br><span class="line">    if(abk-&gt;size == 0)&#123;</span><br><span class="line">        cout &lt;&lt;&quot;通讯录当前为空&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int i=0;i&lt;abk-&gt;size;i++)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;姓名：&quot;&lt;&lt;abk-&gt;person_array[i].p_name&lt;&lt;&quot;\t&quot;; //制表符相当于2个tab</span><br><span class="line">            cout&lt;&lt;&quot;性别：&quot;&lt;&lt;(abk-&gt;person_array[i].p_sex == 1 ? &quot;男&quot;:&quot;女&quot;) &lt;&lt;&quot;\t&quot;; //三目运算符的使用 可以不用if-else判断</span><br><span class="line">            cout&lt;&lt;&quot;年龄：&quot;&lt;&lt;abk-&gt;person_array[i].p_age&lt;&lt;&quot;\t&quot;;</span><br><span class="line">            cout&lt;&lt;&quot;电话：&quot;&lt;&lt;abk-&gt;person_array[i].p_phone&lt;&lt;&quot;\t&quot;;</span><br><span class="line">            cout&lt;&lt;&quot;住址：&quot;&lt;&lt;abk-&gt;person_array[i].p_address&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-删除联系人"><a href="#4-3-删除联系人" class="headerlink" title="4.3 删除联系人"></a>4.3 删除联系人</h3><h4 id="4-3-1-封装检测联系人函数"><a href="#4-3-1-封装检测联系人函数" class="headerlink" title="4.3.1 封装检测联系人函数"></a>4.3.1 封装检测联系人函数</h4><p>设计思路：第一个参数是通讯录，第二个参数是name，循环检测，如果找到了联系人返回联系人的数组下标，否则返回-1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int isExit(AddrBook *abk,string name)&#123;</span><br><span class="line">    for(int i=0;i&lt;abk-&gt;size;i++)&#123;</span><br><span class="line">        if(name == abk-&gt;person_array[i].p_name) return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-封装删除联系人函数"><a href="#4-3-2-封装删除联系人函数" class="headerlink" title="4.3.2 封装删除联系人函数"></a>4.3.2 封装删除联系人函数</h4><p>设计思路：通过 <code>string name</code> 存储用户输入的姓名，然后根据刚才封装的检测联系人函数处理函数结果为-1和不是-1的情况，当不为-1时，类似于顺序表的删除操作，将当前数组下标后面的元素全部前移一位，并且注意要最后将<code>size --</code>,并且进行清屏操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void deletePerson(AddrBook *abk)&#123;</span><br><span class="line">    string name;</span><br><span class="line">    cout&lt;&lt;&quot;请输入要删除的联系人姓名&quot;&lt;&lt;endl;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    //设置ret记录序号，注意从0开始的</span><br><span class="line">    int ret = isExit(abk,name);</span><br><span class="line">    if(ret == -1)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;联系人不存在&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        for(int i=ret;i &lt; abk-&gt;size;i++)&#123;</span><br><span class="line">            abk-&gt;person_array[i]=abk-&gt;person_array[i+1];</span><br><span class="line">        &#125;</span><br><span class="line">        abk-&gt;size--;</span><br><span class="line">        cout&lt;&lt;&quot;联系人删除成功&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-查找联系人"><a href="#4-4-查找联系人" class="headerlink" title="4.4 查找联系人"></a>4.4 查找联系人</h3><p>设计思路：和上面类似，先用ret存储检测联系人函数的数组下标，然后利用位序输出信息即可，最后清屏操作~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void findPerson(AddrBook *abk)&#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入要查找的联系人姓名：&quot;&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    int ret = isExist(abk,name);</span><br><span class="line">    if(ret == -1)&#123;</span><br><span class="line">        cout &lt;&lt;&quot;联系人不存在&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        cout&lt;&lt;&quot;查找成功&quot;&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;&quot;姓名：&quot;&lt;&lt;abk-&gt;person_array[ret].p_name &lt;&lt;&quot;\t&quot;;</span><br><span class="line">        cout&lt;&lt;&quot;性别：&quot;&lt;&lt;(abk-&gt;person_array[ret].p_sex==1?&quot;男&quot;:&quot;女&quot;) &lt;&lt;&quot;\t&quot;;</span><br><span class="line">        cout&lt;&lt;&quot;年龄：&quot;&lt;&lt;abk-&gt;person_array[ret].p_age &lt;&lt;&quot;\t&quot;;</span><br><span class="line">        cout&lt;&lt;&quot;电话：&quot;&lt;&lt;abk-&gt;person_array[ret].p_phone &lt;&lt;&quot;\t&quot;;</span><br><span class="line">        cout&lt;&lt;&quot;住址：&quot;&lt;&lt;abk-&gt;person_array[ret].p_address &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5修改联系人"><a href="#4-5修改联系人" class="headerlink" title="4.5修改联系人"></a>4.5修改联系人</h3><p>设计思路：定义name记录用户输入的名称，然后调用isExist函数，并且用ret记录返回的值，然后根据ret来修改各个属性。修改性别时调用死循环来剔除非法输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">void modifyPerson(AddrBook *abk)&#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入要修改的联系人名称&quot;&lt;&lt;endl;</span><br><span class="line">    string name;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    int ret = isExist(abk,name);</span><br><span class="line">    if(ret == -1)&#123;</span><br><span class="line">        cout &lt;&lt;&quot;联系人不存在!&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //修改姓名</span><br><span class="line">        cout &lt;&lt;&quot;请输入姓名&quot;&lt;&lt;endl;</span><br><span class="line">        string name1;</span><br><span class="line">        cin &gt;&gt; name1;</span><br><span class="line">        abk-&gt;person_array[ret].p_name=name;</span><br><span class="line">        </span><br><span class="line">        //修改性别</span><br><span class="line">        cout&lt;&lt;&quot;请输入性别&quot;&lt;&lt;endl;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">        cout&lt;&lt;&quot;1--男 2--女&quot;&lt;&lt;endl;</span><br><span class="line">        int sex;</span><br><span class="line">        cin &gt;&gt; sex;</span><br><span class="line">        if(sex == 1 || sex == 2)&#123;</span><br><span class="line">            abk-&gt;person_array[ret].p_sex=sex;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            cout&lt;&lt;&quot;输入有误，请重新输入&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //修改年龄</span><br><span class="line">        cout &lt;&lt;&quot;请输入年龄&quot;&lt;&lt;endl;</span><br><span class="line">        int age;</span><br><span class="line">        cin &gt;&gt; age;</span><br><span class="line">        abk-&gt;person_array[ret].p_age=age;</span><br><span class="line">        </span><br><span class="line">        //修改电话</span><br><span class="line">        cout &lt;&lt;&quot;请输入电话&quot;&lt;&lt;endl;</span><br><span class="line">        string phone;</span><br><span class="line">        cin &gt;&gt; phone;</span><br><span class="line">        abk-&gt;person_array[ret].p_phone=phone;</span><br><span class="line"></span><br><span class="line">        //修改住址</span><br><span class="line">        cout &lt;&lt;&quot;请输入住址&quot;&lt;&lt;endl;</span><br><span class="line">        string address;</span><br><span class="line">        cin &gt;&gt; address;</span><br><span class="line">        abk-&gt;person_array[ret].p_address=address;</span><br><span class="line">        cout &lt;&lt;&quot;修改成功&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6清空联系人"><a href="#4-6清空联系人" class="headerlink" title="4.6清空联系人"></a>4.6清空联系人</h3><p>设计思路：直接指针调用通讯录，将size设为0即可~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void clearPerson(AddrBook *abk)&#123;</span><br><span class="line">    abk-&gt;size = 0;</span><br><span class="line">    cout&lt;&lt;&quot;通讯录已清空&quot;&lt;&lt;endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    system(&quot;cls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-项目收获"><a href="#5-项目收获" class="headerlink" title="5.项目收获"></a>5.项目收获</h2><p>熟悉了结构体嵌套（联系人结构体和通讯录结构体），结构体指针的调用（难点、关键点），学会使用了三目运算符，也有顺序表的基本操作穿插在其中，同时更加理解了项目背后的设计思路和测试流程。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day05</title>
      <link href="/posts/fbdf17f9.html"/>
      <url>/posts/fbdf17f9.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-空指针和野指针"><a href="#1-空指针和野指针" class="headerlink" title="1.空指针和野指针"></a>1.空指针和野指针</h2><h3 id="1-1空指针"><a href="#1-1空指针" class="headerlink" title="1.1空指针"></a>1.1空指针</h3><p>空指针： 空指针是一个已初始化的指针变量，它被显式地赋值为一个特殊的值，表示它不指向任何有效的内存地址。但是注意空指针是无法解引用的，无法进行访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int *p=NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; p &lt;&lt;endl; //访问失败 无法解引用 </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2野指针"><a href="#1-2野指针" class="headerlink" title="1.2野指针"></a>1.2野指针</h3><p>野指针： 野指针是指一个指针变量，其值不是空指针，但所指向的内存区域是非法的或已经被释放。野指针可能由于以下原因产生：<br>1.指针变量声明后并没有初始化，它的初始值是随机的，可能指向任意一个内存地址<br>2.指针变量指向的区域可能通过某种方式释放了，但是p的指向并没有发生改变，因此指向了一个无效区域，因此应该及时的在释放内存后将指针指向NULL（nullptr）</p><h2 id="2-const修饰指针"><a href="#2-const修饰指针" class="headerlink" title="2.const修饰指针"></a>2.const修饰指针</h2><p>const指针修饰有三种情况：<br>1.const修饰常量–指针常量<br>2.const修饰指针–常量指针<br>3.const既修饰常量又修饰指针</p><p> 首先注意 *p&#x3D;10是修改指针指向区域的值，p&#x3D;&amp;b是修改指针的指向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a=10;</span><br><span class="line">  int b=20;</span><br><span class="line"></span><br><span class="line">  //1.const修饰常量</span><br><span class="line">  int * const p1=&amp;a; </span><br><span class="line">  *p1 = 20;//合法</span><br><span class="line">  p1=&amp;b; //非法</span><br><span class="line"></span><br><span class="line">  //2.const修饰指针</span><br><span class="line">  const int * p2=&amp;a;</span><br><span class="line">  p2 = &amp;b; // 合法</span><br><span class="line">  *p2 = 20; // 非法</span><br><span class="line"></span><br><span class="line">  //3.const既修饰常量，又修饰指针</span><br><span class="line">  const int * const p3 =&amp;a;</span><br><span class="line">  p3 = &amp;b; //非法</span><br><span class="line">  *p3 = 20;//非法</span><br><span class="line"></span><br><span class="line">  return 0；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小技巧：const 后面跟什么，如果紧跟着 *，即const修饰指针，那么就是 常量指针，不可以修改&#x2F; * p（指针指向位置的值）；如果紧跟着 p,即const修饰常量，就是指针常量，不可以修改 p（指针的指向）</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ pointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day04</title>
      <link href="/posts/8cd8276f.html"/>
      <url>/posts/8cd8276f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-数组元素逆置"><a href="#1-数组元素逆置" class="headerlink" title="1.数组元素逆置"></a>1.数组元素逆置</h2><p>案例描述：请声明一个5个元素的数组，并且将元素逆置.<br>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1)<br>核心思路：<br>1.可以新建一个数组临时映射当前的数组<br>2.可以通过指向数组头节点的伪指针start以及指向末尾的 end,然后两个指针不断彼此靠近，即可实现逆置(注意考虑循环终止的条件)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//第一种思路关键代码</span><br><span class="line">    int arr[5]=&#123;1,3,2,5,4&#125;;</span><br><span class="line">    int arr1[5]=&#123;1,3,2,5,4&#125;;</span><br><span class="line">    for(int i=0;i&lt;=4; i++ )&#123;</span><br><span class="line">        arr[i]=arr1[4-i];</span><br><span class="line">    &#125;</span><br><span class="line">    for(int j=0;j&lt;=4;j++)&#123;</span><br><span class="line">        cout&lt;&lt;arr[j]&lt;&lt;&quot;,&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line">//第二种思路</span><br><span class="line"> int arr[5]=&#123;1,3,2,5,4&#125;;</span><br><span class="line">    print(arr,5);  //打印当前数组的值</span><br><span class="line"></span><br><span class="line">    int end = sizeof(arr)/sizeof(arr[0]) -1;</span><br><span class="line">    int start=0;</span><br><span class="line">    while(start &lt; end)&#123;</span><br><span class="line">        int temp = arr[start];</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        arr[end] = temp;</span><br><span class="line">        start++ ; end--;  </span><br><span class="line">    &#125;</span><br><span class="line">    print(arr,5);  //调用自定</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2.冒泡排序"></a>2.冒泡排序</h2><p>冒泡排序（排序算法，对数组中的元素进行排序）<br>过程：<br>1.比较相邻的元素，如果前者比后者大 则交换位置<br>2.对每一对相邻元素做相同的操作，每轮都会选出最大的一个数字放到最右边 ，即“冒泡”<br>3.对于n个元素最坏要进行 n-1+n-2+…+1次，</p><p>以{ 4,2,8,0,5,7,1,3,9 } 为例子，执行过程：</p><p>循环      数组                   比较次数<br>0     2 4 0 5 7 1 3 8 9          8<br>1     2 0 4 5 1 3 7 8            7<br>2     0 2 4 1 3 5 7              6<br>3     0 2 1 3 4 5                5<br>4     0 1 2 3 4                  4<br>5     0 1 2 3                    3<br>6     0 1 2                      2<br>7     0 1                        1<br>8     0      （不计入循环）                    0</p><p>总结（最坏时间复杂度）：<br>    循环次数 &#x3D;&#x3D; n-1;(因为每轮可以理解为弹出一个数，剩下最后一个的时候可以不用进行循环了)<br>    每轮比较次数 &#x3D;&#x3D; n-i(循环轮次，从0开始)-1<br>    比较总次数 &#x3D;&#x3D; 1+2+3+…+n-1 &#x3D; pow(n,2) &#x2F; 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void print(int arr[],int size)&#123;</span><br><span class="line">  //对整数型数组进行输出，需要指定数组的size大小</span><br><span class="line">  for(int i=0;i &lt; size ;i++)&#123;</span><br><span class="line">  cout &lt;&lt; arr[i] &lt;&lt;&quot; &quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt;endl; //这么写保证输出结果在同一行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[9]=&#123; 4,2,8,0,5,7,1,3,9 &#125;;</span><br><span class="line">    cout &lt;&lt; &quot;原数组:&quot; &lt;&lt; endl;</span><br><span class="line">    print(arr,9);</span><br><span class="line">  </span><br><span class="line">    //核心算法代码</span><br><span class="line">    for (int i = 0;i &lt; 9-1;i++)&#123; </span><br><span class="line">        //外层循环i</span><br><span class="line">        for(int j = 0;j &lt; 9-i-1;j++)&#123;</span><br><span class="line">            if(arr[j] &gt; arr[j+1])&#123;</span><br><span class="line">            int temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+1];</span><br><span class="line">            arr[j+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;冒泡排序后的数组：&quot; &lt;&lt;endl;</span><br><span class="line">    print(arr,9);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++  exercise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day03</title>
      <link href="/posts/12bcb2cc.html"/>
      <url>/posts/12bcb2cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="经典编程题"><a href="#经典编程题" class="headerlink" title="经典编程题"></a>经典编程题</h2><h3 id="1-水仙花数"><a href="#1-水仙花数" class="headerlink" title="1.水仙花数"></a>1.水仙花数</h3><p>案例描述：水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身<br>例如：1^3 + 5^3+ 3^3 &#x3D; 153<br>请利用do…while语句，求出所有3位数中的水仙花数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span>     <span class="comment">//使用pow注意包含头文件&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> ge,shi,bai;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        ge=i%<span class="number">10</span>;</span><br><span class="line">        shi=i%<span class="number">100</span>/<span class="number">10</span>;</span><br><span class="line">        bai=i/<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pow</span>(ge,<span class="number">3</span>)+<span class="built_in">pow</span>(shi,<span class="number">3</span>)+<span class="built_in">pow</span>(bai,<span class="number">3</span>)==i)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot;符合条件&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-猜数游戏"><a href="#2-猜数游戏" class="headerlink" title="2.猜数游戏"></a>2.猜数游戏</h3><p>案例描述：系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><p>核心：利用系统当前时间作为随机数种子产生随机数字，保证每次的随机数都不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;ctime&gt;</span><br><span class="line">  </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    srand(time(NULL));</span><br><span class="line">  </span><br><span class="line">    int num,guess=0;  </span><br><span class="line">    int count=0; //计数器</span><br><span class="line">    num = rand()%100+1;  //rand()%100表示范围在0-99之间</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;猜数字游戏现在开始(一百以内)&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    //循环开始</span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;请开始猜数&quot;&lt;&lt;endl;</span><br><span class="line">        cin &gt;&gt; guess;</span><br><span class="line">        count++;</span><br><span class="line">        //开始判断</span><br><span class="line">        if(guess &gt; num)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;你猜的数字大了&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;else if(guess &lt; num)&#123;</span><br><span class="line">            cout&lt;&lt;&quot;你猜的数字小了&quot;&lt;&lt;endl;  </span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            cout&lt;&lt;&quot;恭喜你，答对了&quot;&lt;&lt;endl;</span><br><span class="line">            break;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;&quot;你一共用了&quot;&lt;&lt;count&lt;&lt;&quot;次机会猜对了&quot;&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++  exercise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day02</title>
      <link href="/posts/12bcb2cc.html"/>
      <url>/posts/12bcb2cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="c-语法学习"><a href="#c-语法学习" class="headerlink" title="c++语法学习"></a>c++语法学习</h1><h2 id="1-基础框架"><a href="#1-基础框架" class="headerlink" title="1 基础框架"></a>1 基础框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iosream&gt;</span><br><span class="line">using namesapce std;</span><br><span class="line">int main()&#123;</span><br><span class="line">  cout&lt;&lt;hello world&lt;&lt;endl;</span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与c语言不同:头文件变成了由stdio.h变为了iostream，并且要在第二行加一个 <code>using namespace std;</code>类似于声明全局变量;输出语句由printf变成了 <code>cout&lt;&lt; &quot;内容&quot;&lt;&lt;endl;</code></p><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>c++中数据类型相比于c语言中主要有以下几处不同</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short（短整型）</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int（整型）</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long（长整型）</td><td>windows为四&#x3D;4个字节，linux（32位）为4字节<br />，linux（64位）为8字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long（长长整型）</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><p>与c语言不同的是多了long long（长长整型）</p><p>c++中定义常量有两种方式：<br>1.使用#define +宏常量：<code>#define 常量名 常量值</code><br>2.在变量定义前面加一个const:<code>const 变量名 变量值</code><br><strong>注意定义了常量之后不能再重新使用赋值语句</strong>。</p><h3 id="2-2字符型"><a href="#2-2字符型" class="headerlink" title="2.2字符型"></a>2.2字符型</h3><h4 id="2-2-1-字符型"><a href="#2-2-1-字符型" class="headerlink" title="2.2.1 字符型"></a>2.2.1 字符型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char ch = &#x27;a&#x27;;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; sizeof(char) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span><br><span class="line">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (int)ch &lt;&lt; endl;  //查看字符a对应的ASCII码</span><br><span class="line">ch = 97; //可以直接用ASCII给字符型变量赋值</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c和c++中的字符型变量是将对应的ascⅡ编码存储到内存中，并不是把字符本身存储进去。</p><h4 id="2-2-2-字符串型"><a href="#2-2-2-字符串型" class="headerlink" title="2.2.2 字符串型"></a>2.2.2 字符串型</h4><h5 id="c风格字符串"><a href="#c风格字符串" class="headerlink" title="c风格字符串"></a>c风格字符串</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char str1[]=&quot;abcd&quot;;</span><br><span class="line">    cout&lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-风格字符串"><a href="#c-风格字符串" class="headerlink" title="c++ 风格字符串"></a>c++ 风格字符串</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string str2=&quot;abcdef&quot;;</span><br><span class="line">    cout&lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：c++风格的字符串必须要引入头文件 <code> #include&lt;string&gt;</code> ,上面没引用是因为iostream库隐式地包含了这个头文件。</p><h3 id="2-2-3-键盘输入"><a href="#2-2-3-键盘输入" class="headerlink" title="2.2.3 键盘输入"></a>2.2.3 键盘输入</h3><p>使用关键字cin,语法为 <code>cin &gt;&gt; 变量 &gt;&gt; 变量;</code><br>可以连续输入,在输入过程中按tab 空格 enter 都可以实现分割的作用</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p><strong>今天是学习c++语法的第一天，感觉还可以，和c语言的学习类似，注意一下不同的地方，如输入输出语句的区别，字符串风格的区别，主框架的区别等等</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day01</title>
      <link href="/posts/fcb2d3e0.html"/>
      <url>/posts/fcb2d3e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>倾斜文字：<em>你好呀</em><br>倾斜文字：<em>你好呀</em><br>加粗文字：<strong>你好呀</strong><br>倾斜加粗文字：<em><strong>你好呀</strong></em><br>删除线：<del>你好呀</del><br>分割线：***或者—，___</p><h2 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h2><p>格式为：![] +图片网络路径即可<br>示例：<br>利用picgo图床添加本地图片<br><img src="https://yangbo-1324071261.cos.ap-shanghai.myqcloud.com/af90e861c4944a45b9288ad5c06bc84c.jpg"></p><h2 id="写入链接跳转"><a href="#写入链接跳转" class="headerlink" title="写入链接跳转"></a>写入链接跳转</h2><p>格式为&lt;链接&gt;<br>示例：<a href="http://nmylove.cn/">http://nmylove.cn</a></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用 &#96; （在esc下面，需要三个引起来） 添加代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stido.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">printf(&quot;hello world&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想引用代码块，使用一个反引号即可。<br>示例：<code>int main</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Blog</title>
      <link href="/posts/a30a3587.html"/>
      <url>/posts/a30a3587.html</url>
      
        <content type="html"><![CDATA[<p>我叫杨，射手座，出生于2003年12月12日，住在江西九江，正在学习编程ing~</p>]]></content>
      
      
      <categories>
          
          <category> 个人信息 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
